// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: "common.gradle"
    ext.kotlin_version = '1.4.20'
    repositories {
        google()
        jcenter()
        maven { url './RepoComponent' }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.4.0"
        classpath "com.github.dcendents:android-maven-gradle-plugin:2.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.xiaojinzi.component:component-plugin:${versions.component_version}"
        classpath "com.tencent.bugly:tinker-support:1.2.0"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.bintray.com/fungo/maven' }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
        maven { url 'http://4thline.org/m2' }
//        flatDir {
//            dirs project(':module_base_player').file('libs')
//        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
/**
 * 获取发布版本信息
 */
def getPublishProperty() {
    Properties buildProps = new Properties()
    buildProps.load(new FileInputStream(file('publish.properties')))
    return buildProps
}

/**
 * 获取VersionCode
 */
def getVersionCode() {
    def versionCodeFile = file('version.properties')
    if (versionCodeFile.canRead()) {
        Properties versionCodeProps = new Properties()
        versionCodeProps.load(new FileInputStream(versionCodeFile))
        def versionCode = versionCodeProps['VERSION_CODE'].toInteger()
        // 获取当前任务名
        def runTasks = gradle.startParameter.taskNames
        // 只有在打alpha和beta的正式包的时候进行versionCode的自增操作
        for (task in runTasks) {
            println task
        }
        if (':app:assembleAlphaRelease' in runTasks
                || ':app:assembleAlphaDebug' in runTasks
                || ':app:assembleBetaRelease' in runTasks) {
            // 获取version_code.properties文件的VERSION_CODE的值并加一
            versionCodeProps['VERSION_CODE'] = (++versionCode).toString()
            // 保存versionCode的值到文件中
            versionCodeProps.store(versionCodeFile.newWriter(), null)
        }
        return versionCode
    } else {
        // version_code.properties文件不存在
        throw new GradleException("Could not find verison_code.properties file !!")
    }
}
